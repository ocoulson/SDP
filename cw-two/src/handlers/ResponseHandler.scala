package handlers

import gameStructures.{Response, SecretCode, Guess}
import pegs.{ResponsePeg, White, Black}
import com.softwaremill.macwire._
import scala.util.Random

/**
  * A ResponseHandler is responsible for evaluating the user's guess and returning the
  * appropriate response. The ResponseHandler is initiated using a secret code generated
  * by the current game, to which it compares all subsequent user guesses to.
  *
  * Created by Oliver Coulson and George Shiangoli on 10/03/2016.
  */
class ResponseHandler(secretCode: SecretCode) {

  /**
    * This method takes a Guess generated by the user and compares the code to the secret
    * code used to initialise the ResponseHandler. An appropriate response is produced
    * from this comparison. The response returned contains a vector of response pegs; black
    * for every colour that exactly matches and white for every colour that partially matches.
    *
    * @param guess The user's guess that is to be compared to the secret code
    * @return The appropriate response to provide the user with feedback about their guess.
    */
  def getResponse(guess: Guess): Response = {
    if(guess.equals(secretCode)) {
      getResponseInstance(guess.code.map(c => ResponseFactory.getResponsePeg(true)))
    }
    else {
      val zipped = guess.code.zip(secretCode.code)
      val blacks: Vector[ResponsePeg] = zipped.filter(t => t._1 == t._2).map(t => ResponseFactory.getResponsePeg(true))

      val maybeWhiteLists = zipped.filter(t => t._1 != t._2).unzip

      val maybe1 = maybeWhiteLists._1.map(colour => colour.symbol)
      val maybe2 = maybeWhiteLists._2.map(colour => colour.symbol)

      val whites: Vector[ResponsePeg] = maybe1.intersect(maybe2).map(c => ResponseFactory.getResponsePeg(false))

      getResponseInstance(Random.shuffle(whites ++ blacks))

    }
  }

  /**
    * A method to enable dependency injection using macwire.
    *
    * @param input The vector of response pegs used in creating the Response.
    * @return the Response
    */
  private def getResponseInstance(input: Vector[ResponsePeg]): Response = {
    wire[Response]
  }
}

/**
  * The ResponseFactory generates response peg objects.
  */
object ResponseFactory {

  /**
    * Given a boolean, this method returns a response peg object.
    *
    * @param black the boolean to determine whether a black or white response peg is created
    * @return a black response peg if black is true, a white response peg otherwise
    */
  def getResponsePeg(black: Boolean): ResponsePeg = {
    if(black) wire[Black] else wire[White]
  }
}
