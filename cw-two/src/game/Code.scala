package game

import pegs.Colour

/**
  * Code is an abstract class that represents either a Guess or SecretCode.
  * It stores a vector of colours and functions to return the vector's length,
  * the vector as a string and whether this Code is equal to another.
  *
  * Code is sealed and classes are final  to ensure no other implementations can
  * be created outside of this file.
  *
  * Created by Oliver Coulson and George Shiangoli on 10/03/2016.
  */
sealed abstract class Code(val code: Vector[Colour]) {

  /**
    * The length of the vector of colours.
    * @return the length as an integer
    */
  def length = code.length

  /**
    * Returns a simple string of characters representing each colour in the vector.
    * For example, Vector(Red, Blue, Green, Orange) returns "RBGO"
    * @return a string that represents the vector of colours
    */
  override def toString: String = {
    val builder = new StringBuilder
    val rawString = code.map(c => c.symbol).toString()
    val substring = rawString.substring(rawString.indexOf('(') + 1, rawString.indexOf(')'))
    substring.foreach(c => if(c != ',' && c != ' ') builder.append(c))
    builder.toString()
  }

  /**
    * Checks whether this Code contains the same sequence of colours as another Code, within their
    * respective vectors.
    * @param other the other Code that this Code is being compared to.
    * @return true if both codes contain the same sequence of colours, false otherwise.
    */
  override def equals(other: Any): Boolean = {
    if (!other.isInstanceOf[Code]) false
    else {
      val otherCode = other.asInstanceOf[Code]
      if(this.length != code.length) false
      else {
        val zipped = this.code.zip(otherCode.code)
        for(i <- zipped.indices) {
          if(zipped(i)._1.symbol != zipped(i)._2.symbol) return false
        }
        true
      }
    }
  }
}

/**
  * A Guess represents a sequence of colours that has been generated based upon user input in the GameState.
  * @param code The vector of colours that is to be stored in this Guess.
  */
final class Guess(code: Vector[Colour]) extends Code(code)

/**
  * A SecretCode represents a sequence of colours that is generated by the GameState based upon available Colours.
  * @param code  The vector of colours that is to be stored in this SecretCode.
  */
final class SecretCode(code: Vector[Colour]) extends Code(code)

